// <auto-generated />
using System;
using DesafioApiFilme.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DesafioApiFilme.Migrations
{
    [DbContext(typeof(FilmeContext))]
    [Migration("20230802181202_NewInitialTable")]
    partial class NewInitialTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DesafioApiFilme.Models.Cidade", b =>
                {
                    b.Property<int>("EnderecoId")
                        .HasColumnType("int");

                    b.Property<string>("UfId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CidadeId")
                        .HasColumnType("int");

                    b.Property<string>("NomeCidade")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EnderecoId", "UfId");

                    b.HasIndex("EnderecoId")
                        .IsUnique();

                    b.HasIndex("UfId");

                    b.ToTable("Cidades");
                });

            modelBuilder.Entity("DesafioApiFilme.Models.Cinema", b =>
                {
                    b.Property<int>("CinemaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CinemaId"));

                    b.Property<int>("EnderecoId")
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CinemaId");

                    b.HasIndex("EnderecoId")
                        .IsUnique();

                    b.ToTable("Cinemas");
                });

            modelBuilder.Entity("DesafioApiFilme.Models.Endereco", b =>
                {
                    b.Property<int>("EnderecoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EnderecoId"));

                    b.Property<int>("CidadeId")
                        .HasColumnType("int");

                    b.Property<int>("CinemaId")
                        .HasColumnType("int");

                    b.Property<string>("Logradouro")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Numero")
                        .HasColumnType("int");

                    b.HasKey("EnderecoId");

                    b.ToTable("Enderecos");
                });

            modelBuilder.Entity("DesafioApiFilme.Models.Filme", b =>
                {
                    b.Property<int>("FilmeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FilmeId"));

                    b.Property<int>("Duracao")
                        .HasColumnType("int");

                    b.Property<string>("Genero")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FilmeId");

                    b.ToTable("Filmes");
                });

            modelBuilder.Entity("DesafioApiFilme.Models.Sessao", b =>
                {
                    b.Property<int?>("FilmeId")
                        .HasColumnType("int");

                    b.Property<int?>("CinemaId")
                        .HasColumnType("int");

                    b.Property<string>("Horario")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Sala")
                        .HasColumnType("int");

                    b.HasKey("FilmeId", "CinemaId");

                    b.HasIndex("CinemaId");

                    b.ToTable("Sessoes");
                });

            modelBuilder.Entity("DesafioApiFilme.Models.UF", b =>
                {
                    b.Property<string>("UfId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("NomeUf")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UfId");

                    b.ToTable("Ufs");
                });

            modelBuilder.Entity("DesafioApiFilme.Models.Cidade", b =>
                {
                    b.HasOne("DesafioApiFilme.Models.Endereco", "Endereco")
                        .WithOne("Cidade")
                        .HasForeignKey("DesafioApiFilme.Models.Cidade", "EnderecoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DesafioApiFilme.Models.UF", "Uf")
                        .WithMany("Cidade")
                        .HasForeignKey("UfId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Endereco");

                    b.Navigation("Uf");
                });

            modelBuilder.Entity("DesafioApiFilme.Models.Cinema", b =>
                {
                    b.HasOne("DesafioApiFilme.Models.Endereco", "Endereco")
                        .WithOne("Cinema")
                        .HasForeignKey("DesafioApiFilme.Models.Cinema", "EnderecoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Endereco");
                });

            modelBuilder.Entity("DesafioApiFilme.Models.Sessao", b =>
                {
                    b.HasOne("DesafioApiFilme.Models.Cinema", "Cinema")
                        .WithMany("Sessoes")
                        .HasForeignKey("CinemaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DesafioApiFilme.Models.Filme", "Filme")
                        .WithMany("Sessoes")
                        .HasForeignKey("FilmeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cinema");

                    b.Navigation("Filme");
                });

            modelBuilder.Entity("DesafioApiFilme.Models.Cinema", b =>
                {
                    b.Navigation("Sessoes");
                });

            modelBuilder.Entity("DesafioApiFilme.Models.Endereco", b =>
                {
                    b.Navigation("Cidade")
                        .IsRequired();

                    b.Navigation("Cinema")
                        .IsRequired();
                });

            modelBuilder.Entity("DesafioApiFilme.Models.Filme", b =>
                {
                    b.Navigation("Sessoes");
                });

            modelBuilder.Entity("DesafioApiFilme.Models.UF", b =>
                {
                    b.Navigation("Cidade");
                });
#pragma warning restore 612, 618
        }
    }
}
